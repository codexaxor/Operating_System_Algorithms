#include "bits/stdc++.h"
using namespace std;

/// optimal

int pointer;
int faults;

int Optimal_Algorithm(int reference_length, int reference_array[], int frame_size, int frame[], int start)
{
	int pos = -1, RightMost = start, i;
	for (i = 0; i < frame_size; i++)
	{
		int j;
		for (j = start; j < reference_length; j++)
		{
			if (frame[i] == reference_array[j])
			{
				if (j > RightMost)
				{
					RightMost = j;
					pos = i;
				}
				break;
			}
		}
		if (j == reference_length)
			return i;
	}

	return pos;
}

void Check_Faults(int frame_size, int frame[], int reference, int current_position, int reference_length, int reference_array[])
{
	int i;
	bool allocated = false;
	for (i = 0; i < frame_size; i++)
	{

		if (frame[i] == reference)
		{
			allocated = true;
			break;
		}
		else if (frame[i] == -1)
		{
			frame[i] = reference;
			faults++;
			allocated = true;
			break;
		}
	}
	if (allocated == false)
	{
		int j = Optimal_Algorithm(reference_length, reference_array, frame_size, frame, current_position + 1);

		frame[j] = reference;
		faults++;
	}

}

int main()
{
	int frame_size, i, number_of_references;
	printf("Enter frame size: ");
	printf("\n");
	scanf("%d", &frame_size);
	int frame[frame_size];
	for (i = 0; i < frame_size; i++)
	{
		frame[i] = -1;
	}

	printf("Enter the number of references: ");
	printf("\n");
	scanf("%d", &number_of_references);
	int reference_array[number_of_references];

	for (i = 0; i < number_of_references; i++)
	{
		scanf("%d", &reference_array[i]);
		Check_Faults(frame_size, frame, reference_array[i], i, number_of_references, reference_array);
	}
	printf("Number of faults using Optimal Page Replacement Algorithm : %d\n", faults);
	printf("Page Fault Rate : %d", (int)ceil((faults * 100 * 1.0) / number_of_references));
	cout << "%" << endl;
}


/*
3
22
7 0 1 2 0 3 0 4 2 3 0 3 0 3 2 1 2 0 1 7 0 1
*/